#include "../board.h"

#define SCHEDULER_TIMER_ID 7
#if SCHEDULER_TIMER_ID==7
    #define SCHEDULER_TIMER_BASE TIMER7_BASE
    #define SCHEDULER_TIMER_INTERRUPT TIMER7_INTERRUPT
#elif SCHEDULER_TIMER_ID==6
    #define SCHEDULER_TIMER_BASE TIMER6_BASE
    #define SCHEDULER_TIMER_INTERRUPT TIMER6_INTERRUPT
#elif SCHEDULER_TIMER_ID==5
    #define SCHEDULER_TIMER_BASE TIMER5_BASE
    #define SCHEDULER_TIMER_INTERRUPT TIMER5_INTERRUPT
#elif SCHEDULER_TIMER_ID==4
    #define SCHEDULER_TIMER_BASE TIMER4_BASE
    #define SCHEDULER_TIMER_INTERRUPT TIMER4_INTERRUPT
#elif SCHEDULER_TIMER_ID==3
    #define SCHEDULER_TIMER_BASE TIMER3_BASE
    #define SCHEDULER_TIMER_INTERRUPT TIMER3_INTERRUPT
#elif SCHEDULER_TIMER_ID==2
    #define SCHEDULER_TIMER_BASE TIMER2_BASE
    #define SCHEDULER_TIMER_INTERRUPT TIMER2_INTERRUPT
#endif

// Scheduler
#define SCHEDULER_TIMER_PRESCALE 1
#define TIMER0_HZ 4096          // the frequency of timer0 IRQ
#define TASK_QUANTUM 10         // 10ms per task
#define TIMER0_RELOAD_VALUE     -(32768/(TIMER0_HZ*(1<<(SCHEDULER_TIMER_PRESCALE+1))))
#define TASK_QUANTUM_COUNTER  ((TIMER0_HZ*TASK_QUANTUM)/1000)


#define STACK_BASE_FIQ   (SDRAM_START+0x1000)
#define STACK_BASE_ABORT   (SDRAM_START+0x3000)
#define STACK_BASE_UNDEFINED   (SDRAM_START+0x4000)
#define STACK_BASE_SYSTEM   (SDRAM_START+0x5000)


#define PROCESS_STACK_TOP 0xFFFFF000 // last page of stack 
#define PROCESS_STACK_BOTTOM 0xF0001000
#define IRQ_STACK_TOP (PROCESS_STACK_BOTTOM)
#define IRQ_STACK_BOTTOM (IRQ_STACK_TOP-1024)
#define SVC_STACK_TOP (IRQ_STACK_BOTTOM)
#define SVC_STACK_BOTTOM (SVC_STACK_TOP-1024)

#define KERNEL_RESERVED_END (SDRAM_START+0xA00000)
#define PROCESS_CODE_END (PROCESS_CODE_START+0x10000000)

#define KERNEL_LEVEL1_PAGE_TABLE (SDRAM_START+0x100000)
#define KERNEL_LEVEL1_PAGE_TABLE_SIZE (4096*4)
#define KERNEL_LEVEL2_PAGE_TABLE (KERNEL_LEVEL1_PAGE_TABLE+KERNEL_LEVEL1_PAGE_TABLE_SIZE)
#define KERNEL_LEVEL2_PAGE_TABLE_SIZE (256*4)
#define KERNEL_PROCESS_LIST_SIZE (256)
#define KERNEL_PROCESS_LIST_SIZE_MASK (0xFF)
#define KERNEL_PROCESS_ENTRY_SIZE (256)
#define KERNEL_PROCESS_ENTRY_SIZE_SHIFT (8)
#define KERNEL_PROCESS_LIST_START (KERNEL_LEVEL2_PAGE_TABLE+(KERNEL_LEVEL2_PAGE_TABLE_SIZE*4096))
#define KERNEL_PROCESS_LIST_END (KERNEL_PROCESS_LIST_START+(KERNEL_PROCESS_LIST_SIZE*KERNEL_PROCESS_ENTRY_SIZE))
#define KERNEL_PHYSICAL_IRQ_STACK KERNEL_PROCESS_LIST_END
